#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api-auth:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Sockets configuration
 */

const SocketIO = require('socket.io');
const tools = require('../helpers/tools');

const io = SocketIO(server);

// Array holding sockets associated with userIds and lastestPositions
const sockets = [];

io.on('connection', (socket) => {
  let updatePositionInterval = null;

  // Send custom welcome message to one client connected
  io.to(`${socket.id}`).emit('message', `Welcome to UOP! ${socket.id}`);
  
  // Add user info to socket array
  socket.on('me', async (userId) => {
    let index = await tools.findUserSocket(userId, sockets);
    if (index < 0) {
      sockets.push({
        userId,
        socket: socket.id,
        position: [],
        interval: null,
      });
    } else {
      sockets[index].socket = socket.id;
      clearInterval(sockets[index].interval);
      sockets[index].interval = null;
    }
    index = tools.findUserSocket(userId, sockets);
    updatePositionInterval = setInterval(() => {
      tools.updateUserPosition(sockets[index].userId, sockets[index].position)
      io.to(`${socket.id}`).emit('message', 'Posicion actualizada en bbdd');
    }, 30000);
    sockets[index].interval = updatePositionInterval;
  });

  // User has update him position
  socket.on('update-position', async ({ userId, position }) => {
    io.to(`${socket.id}`).emit('message', `User: ${userId}, Position: ${position}`);
    const index = tools.findUserSocket(userId, sockets);
    if (index >= 0) {
      sockets[index].position = position;
    }
  });

  // Stop bdd update interval
  socket.on('stopUpdateInterval', () => {
    clearInterval(updatePositionInterval);
    updatePositionInterval = null;
  });
  
  // User logout
  socket.on('logout', async (userId) => {
    clearInterval(updatePositionInterval);
    updatePositionInterval = null;
    const index = await tools.findUserSocket(userId, sockets);
    sockets.splice(index, 1);
  });

  // InMyZone
  socket.on('InMyZone', async (id) => {
    // Search userId into socketsArray to get him information
    const index = tools.findUserSocket(id, sockets);

    // TODO: update users positions to the last updated
    await tools.updateUserPosition(sockets[index].userId, sockets[index].position);

    // TODO: find near users
    const nearOpiners = await tools.findNearOpiners(sockets[index].userId);

    // TODO: return nearOpiners array
    sockets[index].socket.emit('NearOpiners', nearOpiners);
  });
});
